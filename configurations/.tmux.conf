## Basic options.

# No escape timeout.
set-option -sg escape-time 0

# Enable true colors and set status line colours.
set-option -g default-terminal "${TERM}"
set-option -sg terminal-overrides ",*:RGB"

# Reorder windows when one of them is deleted.
set-option -g renumber-windows on

# Window and pane indices starts at 1.
set-option -g base-index 1
set-option -g pane-base-index 1

# Nicer pane separators (in my humble opinion).
set -g pane-border-lines simple
set -g pane-active-border-style fg=magenta


## Status line.

# Gray status line suitable for both dark and light themes.
set-option -g status-bg "#ebdbb2"
set-option -g status-fg "#2a2c3c"

set-option -g status-left ""
set-option -g status-right \
    "#(cd #{pane_current_path}; \
    if [ $(git rev-parse --abbrev-ref HEAD 2>/dev/null) ]; then \
        echo \"Git branch: ($(git rev-parse --abbrev-ref HEAD)) |\"; \
    fi ) Session: [#S] @ [#H]"
set-option -g status-right-length 100

# 1 second refresh interval for the status line.
set -g status-interval 1

set-option -g window-status-current-format "[#I] > #W #F "
set-option -g window-status-format "[#I] > #W #F "


## Built-in scrollback configurations.

# Limit the scrollback.
set-option -g history-limit 10000

# Enable vi motions mode for scrollback.
set-option -g mode-keys vi

# Vim visual selection/yank maps.
bind-key -T copy-mode-vi "v" send -X begin-selection
bind-key -T copy-mode-vi "V" send -X select-line
bind-key -T copy-mode-vi "C-v" {
    send -X begin-selection
    send -X rectangle-toggle
}

bind-key -T copy-mode-vi "y" send -X copy-selection

# Don't exit copy mode after dragging with mouse.
unbind -T copy-mode-vi MouseDragEnd1Pane


## Key bindings.

# Set tmux "leader" key to Ctrl-b.
set-option -g prefix C-b

# [R]eload the config file.
bind-key "r" source-file ~/.tmux.conf \; display-message "Config reloaded..."

# [E]xplore the native session manager window.
bind-key "e" choose-tree -Zs

# Sessionizer mappings.
# [F]ind and open/create a session for a set of predefined working directories.
bind-key "f" run-shell "tmux new-window 'tmux-sessionizer.nu common-paths'"
# Switch to an [a]ctive session.
bind-key "a" run-shell "tmux new-window 'tmux-sessionizer.nu active-sessions'"
# Open/create a session for the current [d]irectory.
bind-key "d" run-shell "tmux new-window 'tmux-sessionizer.nu #{pane_current_path}'"

# Create [n]ew window.
bind-key "n" new-window

# Quickly jump back and forth between last opened window/session.
# Go [b]ack to the last window.
bind-key "b" last-window
# Like Cmd+Tab for applications.
bind-key "Tab" switch-client -l

# [Cl]ear the screen.
bind-key "C-l" send-keys "C-l"

# Split panes.
# [S]plit horizontally.
bind-key "s" split-window -v
# Split [v]ertically.
bind-key "v" split-window -h

# Pane switching w/ vi motions.
bind-key "h" select-pane -L
bind-key "j" select-pane -D
bind-key "k" select-pane -U
bind-key "l" select-pane -R

# Pane resizing w/ vi motions.
bind-key -r "H" resize-pane -L 5
bind-key -r "J" resize-pane -D 5
bind-key -r "K" resize-pane -U 5
bind-key -r "L" resize-pane -R 5

# [M]aximise the current pane.
bind-key "m" resize-pane -Z

# Edit the whole (allowed) scrollback history with $EDITOR.
bind-key "]" run-shell "tmux new-window \
  'tmux capture-pane -p -t #{pane_id} -S - \
  | save --force /tmp/tmux-capture.txt; \
  $EDITOR /tmp/tmux-capture.txt'"

# [C]lose current pane/window.
bind-key "c" confirm-before -p "Kill this pane (y/n)?" "kill-pane"
bind-key "C" confirm-before -p "Kill this pane (y/n)?" "kill-window"

# Kill all [o]ther panes/window except the current one.
bind-key "o" confirm-before -p "Kill all other panes (y/n)?" "kill-pane -a"
bind-key "O" confirm-before -p "Kill all other windows (y/n)?" "kill-window -a"

# Safely e[x]it session (i.e. kill and switch).
bind-key "x" confirm-before -p "Kill `#{client_session}` session (y/n)?" \
  "run-shell 'tmux switch-client -l; \
  if [ \$? -ne 0 ]; then \
      tmux switch-client -n; \
  fi; \
  tmux kill-session -t \"#{client_session}\"'"
